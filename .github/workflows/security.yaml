# .github/workflows/security-pipeline.yaml

name: Security Pipeline (Secrets, SAST, Build, SBOM)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-sbom:
        # -------------------- YENİ ADIMLAR: ZAP DAST Taraması -------------
      # 3.2: ZAP Baseline Tarama (example.com'a karşı)
      - name: Run ZAP Baseline Scan against Example.com
        # ZAP bulgu bulursa çıkış kodu > 0 verebilir. Raporu almak için devam et:
        continue-on-error: true
        run: |
          # Raporların kaydedileceği dizini oluştur
          mkdir -p zap-results
          # ZAP Docker imajını kullanarak baseline taramasını çalıştır
          echo "Starting ZAP baseline scan against https://www.example.com..."
          docker run --rm \
            -v $(pwd)/zap-results:/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t https://www.example.com \
            -r zap_baseline_report.html \
            -J zap_baseline_report.json \
            -l PASS # Sadece PASS seviyesindeki informational alert'leri raporla (daha az gürültü için)
            # Daha kapsamlı tarama veya farklı ayarlar için ZAP dökümanlarına bakınız.
          echo "ZAP scan finished."

      # 3.3: ZAP Raporlarını Artifact olarak yükle
      - name: Upload ZAP Report Artifacts
        # ZAP adımı continue-on-error nedeniyle başarısız işaretlense bile yükle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-baseline-reports
          # Oluşturulan raporları içeren dizini yükle
          path: zap-results/
      # -------------------- DAST Taraması Bitti -------------------------
    name: Secrets, Build and SBOM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks Secrets Scan
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true
        env:
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: "true"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_REDACT: "true"
          GITLEAKS_REPORT_FORMAT: "sarif"
          GITLEAKS_REPORT_PATH: "gitleaks.sarif"

      - name: List files after Gitleaks
        run: ls -la
        if: always()

      - name: Upload Gitleaks SARIF to GitHub Security Tab
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gitleaks.sarif
          path: .

      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # ... (Diğer adımlar aynı kalır, sadece numaraları değişir) ...

      # 1.6: Docker imajını build et
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: juice-shop-local:latest

      # 1.7: Syft SBOM aracını kur
      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          syft version

      # 1.8: SBOM oluştur
      - name: Generate SBOM from Docker image
        run: |
          syft packages docker:juice-shop-local:latest -o spdx-json=sbom-spdx.json
          syft packages docker:juice-shop-local:latest -o cyclonedx-json=sbom-cyclonedx.json

      # 1.9: SBOM dosyalarını artifact olarak kaydet
      - name: Upload SBOM artifact (SPDX)
        uses: actions/upload-artifact@v4
        with:
          name: sbom-spdx
          path: sbom-spdx.json
      - name: Upload SBOM artifact (CycloneDX)
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom-cyclonedx.json

  # ----- JOB 2: SAST Scan using Semgrep (runs after Job 1) -----
  sast-scan:
    # ... (Bu iş aynı kalır) ...
    name: SAST Scan (Semgrep)
    needs: build-and-sbom
    runs-on: ubuntu-latest
    container: returntocorp/semgrep
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run Semgrep Scan
        continue-on-error: true
        run: |
          mkdir -p semgrep/results
          semgrep ci --config=auto --sarif --output=semgrep/results/semgrep.sarif
      - name: Upload SARIF file to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep/results/semgrep.sarif
      - name: Upload Semgrep report as Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-sast-report
          path: semgrep/results/semgrep.sarif

  deploy:
    name: Simulate Deployment
    # Bu işin başlaması için HEM build-and-sbom HEM DE sast-scan işlerinin bitmesi gerekir.
    # NOT: Eğer önceki işlerde continue-on-error varsa, onlar "başarısız" olsa bile
    # bu iş başlayabilir (job'lar iptal edilmediği sürece).
    needs: [build-and-sbom, sast-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Dummy Deploy Step
        run: |
          echo "Simulating deployment..."
          echo "Deployment environment: Production"
          echo "Deployment successful!"
          # Gerçek deploy komutları buraya gelir
